<CustomTree xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:ui="weave.ui.*"
    xmlns="weave.ui.*"
    creationComplete="handleCreationComplete()"
    openDuration="0" dragEnabled="true"
	allowMultipleSelection="true"
    showRoot="false"
	implements="weave.api.core.ILinkableObject">
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.events.ListEvent;
			
			import weave.api.newLinkableChild;
			import weave.core.LinkableWatcher;
			import weave.services.Admin;
			import weave.services.EntityCache;
			import weave.utils.EventUtils;
			import weave.utils.VectorUtils;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				setupContextMenu();
			}
			private function setupContextMenu():void
			{
				contextMenu = new ContextMenu();
				var selectChildren:ContextMenuItem = new ContextMenuItem("Select all child nodes");
				contextMenu.customItems = [selectChildren];
				contextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, function(event:*):void {
					var node:EntityNode = selectedItem as EntityNode;
					selectChildren.enabled = node && node.children && node.children.length;
				});
				selectChildren.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(event:*):void {
					selectedItems = VectorUtils.flatten(selectedItems.map(function(node:EntityNode, i:int, a:Array):*{
						expandItem(node, true);
						return node.children ? ArrayCollection(node.children).source : [];
					}));
					dispatchEvent(new ListEvent(ListEvent.CHANGE));
				});
			}
			
			public function set entityCache(cache:EntityCache):void
			{
				cacheWatcher.target = cache;
			}
			
			private const cacheWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, EventUtils.generateDelayedCallback(this, refresh, 100));
			
			public function set rootFilterType(entityType:String):void
			{
				dataProvider = _rootNode = new EntityNode(entityType);
				dataDescriptor = new EntityTreeDataDescriptor();
				nodeFilterFunction = _nodeFilterFunction;
			}
			
			private var _nodeFilterFunction:Function;
			private var _rootNode:EntityNode;
			public function get rootNode():EntityNode
			{
				return _rootNode;
			}
			
			public function set nodeFilterFunction(filter:Function):void
			{
				if (_rootNode)
					_rootNode.children.filterFunction = filter;
				else
					_nodeFilterFunction = filter;
			}
			
			private function handleCreationComplete():void
			{
				BindingUtils.bindSetter(connectionReady, Admin.instance, 'userHasAuthenticated');
			}
			
			private function connectionReady(userHasAuthenticated:Boolean):void
			{
			    if (userHasAuthenticated == true)
					refreshDataProvider();
			}
			
			public function refresh():void
			{
				// Because we are not rendering the root node, we need to explicitly request the children from
				// the root so that the children will be fetched.
				if (_rootNode)
					_rootNode.children.refresh();
				
				refreshDataProvider();
				
				// since this function may be called some time after the EntityCache updates,
				// dispatching an event here allows other code to know when data is actually refreshed
				dispatchEvent(new ListEvent(ListEvent.CHANGE));
			}
		]]>
	</mx:Script>
</CustomTree>
