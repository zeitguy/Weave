<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<admin:WizardViewStack
			xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns:ui="weave.ui.*"
			xmlns:admin="weave.ui.admin.*"
			xmlns="weave.ui.admin.wizards.*" 
			label="Import shape data"
			creationComplete="handleCreationComplete()"
			>
	
	<mx:VBox width="100%" height="100%" label="{lang('Select files and destination')}">
		<mx:CheckBox id="noAppendCheckBox" label="{lang('Create new Weave table entry even if a matching one already exists')}"/>
		
		<ui:Indent width="100%" label="Load Shape files" group="{tableSelector.indentGroup}">
			<mx:TextInput id="shpFileNameInput" width="240"/>
			<mx:Button label="{lang('Upload ...')}" click="browseAndUploadShapeFiles();"/>
			<mx:Button label="{lang('Choose File on Server')}" click="openServerBrowser();" />
			<mx:Label text="{fileUploadCount > 0 ? lang('{0} of {1} files uploaded', fileUploadCount, targetFileUploadCount) : ''}"/>
		</ui:Indent>
		<admin:SQLTableSelectorDialog
			id="tableSelector"
			visible="{arrayNotEmpty(dbfColumns)}"
			change="handleChange();"
			showTableCombo="false"
			creationComplete="tableSelector.tableControls.label = lang('SQL Table Prefix');"
			activeTable="{shpFileNameInput.text}"
			tableOverwriteCheckVisible="{Admin.instance.currentUserIsSuperuser}"/>
	</mx:VBox>
	
	<mx:VBox width="100%" height="100%">
		<ui:Indent label="{lang('Table display name')}" group="{indentGroup}">
			<ui:TextInputWithPrompt id="tableTitleInput"
									change="handleChange();"
									prompt="{lang('Enter a table name')}"
									text="{tableSelector.activeTable}"/>
			<ui:HelpComponent>
				This is the name that will be visible in Weave.
			</ui:HelpComponent>
		</ui:Indent>
		
		<mx:HBox>
			<mx:CheckBox id="dbfImportCheckBox" label="{lang('Publish DBF data as Weave attribute columns')}" selected="true" change="handleKeyColumnsChange()" />
			<ui:HelpComponent>
				The DBF file is used to generate record identifiers for the geometries contained in the SHP file.
				Creating attribute columns for the rest of the DBF data is optional, but requires a key column or
				set of columns with values that uniquely identify rows in the DBF table.
			</ui:HelpComponent>
		</mx:HBox>
		<ui:IndentTextInput label="{lang('Null flag values')}" id="nullFlagInput" group="{indentGroup}"
				visible="{dbfImportCheckBox.selected}" includeInLayout="{dbfImportCheckBox.selected}"
				toolTip="{lang('Specify flag values to treat as missing data, separated by commas')}"/>
		
		<ui:Indent id="projectionCode" label="{lang('Projection SRS')}" group="{indentGroup}">
			<mx:TextInput id="srsProjectionTxtInput" change="validateProjectionSRS()"/>
		</ui:Indent>
		
		<ui:Indent label="{lang('DBF Key column(s)')}" group="{indentGroup}">
			<ui:CustomComboBox id="dbfKeyColumnsCombo" dataProvider="{dbfColumns}" change="handleKeyColumnsChange()" editable="true" width="240"/>
			<ui:HelpComponent>
				Separate DBF column names by commas.
				Values in the given columns will be concatenated to form unique identifiers for the shapes.
				These keys will also be used as the keys of the DataTable entry created from the DBF file.
			</ui:HelpComponent>
		</ui:Indent>
		
		<admin:KeyTypeDialog id="keyTypeDialog"
							 defaultKeyType="{tableSelector.activeTable}"
							 change="handleChange()"
							 includeInLayout="{dbfKeyColumnsCombo.text &amp;&amp; !dbfKeyColumnsCombo.errorString}"
							 visible="{dbfKeyColumnsCombo.text &amp;&amp; !dbfKeyColumnsCombo.errorString}"/>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import weave.api.reportError;
			import flash.utils.getQualifiedClassName;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.StringUtil;
			
			import weave.api.WeaveAPI;
			import weave.core.UIUtils;
			import weave.services.Admin;
			import weave.services.WeaveAdminService;
			import weave.services.addAsyncResponder;
			import weave.ui.IndentGroup;
			import weave.ui.admin.ServerFileViewer;
			import weave.utils.EventUtils;
			
			private static const paddingIndent:int = 20;
			[Bindable] public var indentGroup:IndentGroup = new IndentGroup();
			
			private static const DEFAULT_PROJECTION:String = 'defaultProjectionSRS';
			private const sharedObject:SharedObject = SharedObject.getLocal(getQualifiedClassName(this).split('::').join('.'));
			private function handleCreationComplete():void
			{
				shapeFileReferenceList.addEventListener(Event.SELECT, shapeFileSelectedHandler);
				shpFileNameInput.addEventListener(
					Event.CHANGE,
					function(..._):void
					{
						if (UIUtils.hasFocus(shpFileNameInput))
							delayedHandleShpNameChange();
					}
				);
				srsProjectionTxtInput.text = sharedObject.data[DEFAULT_PROJECTION] || "EPSG:4326";
				handleChange();
			}
			
			private function handleChange():void
			{
				var step1:Boolean = (
					shpFileNameInput.text
					&& tableSelector.activeSchema
					&& tableSelector.activeTable
					&& fileUploadCount >= targetFileUploadCount
					&& dbfColumns.length > 0
					&& tableTitleInput.text
				);
				var step2:Boolean = (
					dbfKeyColumnsCombo.text
					&& !dbfKeyColumnsCombo.errorString
					&& keyTypeDialog.selectedKeyType
				);
				stepsCompleted = [step1,step2];
			}
			
			private function arrayNotEmpty(array:Array):Boolean
			{
				return array && array.length;
			}
			
			private const delayedHandleShpNameChange:Function = EventUtils.generateDelayedCallback(this, handleShpNameChange);
			private function handleShpNameChange():void
			{
				var names:Array = WeaveAPI.CSVParser.parseCSV(shpFileNameInput.text)[0] || [];
				_dbfFilesToRequestColumnNamesFrom = names.map(
					function(n:String, i:int, a:Array):String { return n + '.dbf'; }
				);
				tableSelector.activeTable = names.length ? names[0] : '';
				
				getColumnNames();
			}
			
			private function getColumnNames():void
			{
				dbfColumns = [];
				shpFileNameInput.errorString = '';
				
				if (_dbfFilesToRequestColumnNamesFrom.length > 0)
				{
					var query:AsyncToken;
					addAsyncResponder(
						query = Admin.service.getDBFColumnNames(_dbfFilesToRequestColumnNamesFrom),
						function(event:ResultEvent, files:Array):void
						{
							if (files != _dbfFilesToRequestColumnNamesFrom)
								return;
							dbfColumns = event.result as Array || [];
							handleKeyColumnsChange();
						},
						function(event:FaultEvent, files:Array):void
						{
							if (files != _dbfFilesToRequestColumnNamesFrom)
								return;
							
							shpFileNameInput.errorString = event.fault.faultString;
							selectedIndex = 0;
							handleKeyColumnsChange();
						},
						_dbfFilesToRequestColumnNamesFrom
					);
					Admin.service.hideFaultMessage(query);
				}
				
				handleChange();
			}
			
			/**
			 * This function is called to check if the selected key column has unique values.
			 * If the column does not have unique values we set the errorString on the key column
			 * combo box and disable the next and finish buttons.
			 * */
			private function handleKeyColumnsChange():void
			{
				handleChange();
				if (dbfKeyColumnsCombo.dataProvider == null || (dbfKeyColumnsCombo.dataProvider as ArrayCollection).length == 0)
				{
					return;
				}
				
				if (!dbfImportCheckBox.selected)
				{
					dbfKeyColumnsCombo.errorString = '';
					handleChange();
					return;
				}
				
				var trimmedKeyCols:String = StringUtil.trimArrayElements(dbfKeyColumnsCombo.text,",");
				var keyCols:Array = trimmedKeyCols.split(","); 
				
				addAsyncResponder(
					Admin.service.checkKeyColumnsForDBFImport(_dbfFilesToRequestColumnNamesFrom, keyCols),
					keyColumnsCheckedForUniqueness
				);
			}
			
			[Bindable] public var dbfColumns:Array = [];
			[Bindable] private var fileUploadCount:int = 0;
			[Bindable] private var targetFileUploadCount:int = 0;
			private var _dbfFilesToRequestColumnNamesFrom:Array = []; // of String
			private function shapeFileSelectedHandler(event:Event):void
			{
				fileUploadCount = 0;
				targetFileUploadCount = shapeFileReferenceList.fileList.length;
				shpFileNameInput.text = '';
				_dbfFilesToRequestColumnNamesFrom = [];
				
				for each (var fileRef:FileReference in shapeFileReferenceList.fileList)
				{
					var name:String = fileRef.name;
					var ext:String = name.substr(name.length - 4).toLowerCase(); // lower case extension
					var nameWithoutExt:String = name.substr(0, name.length - 4);
					if (ext == ".shp")
					{
						if (shpFileNameInput.text != '')
							shpFileNameInput.text += ',';
						shpFileNameInput.text += nameWithoutExt;
					}
					if (ext == ".dbf")
					{
						dbfColumns = [];
						_dbfFilesToRequestColumnNamesFrom.push(fileRef.name);
					}
					
					fileRef.addEventListener(IOErrorEvent.IO_ERROR, fileErrorHandler);
					fileRef.addEventListener(Event.COMPLETE, handleFileLoadComplete);
					fileRef.load();
					stepsCompleted = [false,false];
				}
			}
			
			private var shapeFileReferenceList:FileReferenceList = new FileReferenceList();
			private function browseAndUploadShapeFiles():void
			{
				try
				{
					var fileTypes:Array = [new FileFilter("Shape Files", "*.*")];
					shapeFileReferenceList.browse(fileTypes);
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}

			private function fileErrorHandler(event:IOErrorEvent):void
			{
				var fileRef:FileReference = event.target as FileReference;
				if (shapeFileReferenceList.fileList.indexOf(fileRef) >= 0)
				{
					WeaveAdminService.messageDisplay(
						"File upload failed",
						"File: " + fileRef.name + "\n" + "Size: " + fileRef.size + "\n" + event.text,
						true
					);
				}
			}
			
			private function handleFileLoadComplete(event:Event):void
			{
				var fileRef:FileReference = event.target as FileReference;
				if (shapeFileReferenceList.fileList.indexOf(fileRef) >= 0)
				{
					var query:AsyncToken = Admin.service.uploadFile(fileRef.name, fileRef.data);
					addAsyncResponder(query, handleFileUploadComplete, null, fileRef);
				}
			}
			
			private function handleFileUploadComplete(event:ResultEvent, token:Object = null):void
			{
				if (shapeFileReferenceList.fileList.indexOf(token) >= 0)
				{
					fileUploadCount++;
					
					if( fileUploadCount == targetFileUploadCount )
						getColumnNames();
				}
			}
			
			private var _serverFileBrowser:ServerFileViewer = null;
			private function openServerBrowser():void
			{
				_serverFileBrowser = ServerFileViewer.createServerFileViewer(this, ServerFileViewer.INPUT_SHP);
				_serverFileBrowser.dataGrid.addEventListener(MouseEvent.DOUBLE_CLICK, serverFileBrowserSelectFile);
				_serverFileBrowser.selectButton.addEventListener(MouseEvent.CLICK, serverFileBrowserSelectFile);				
			}
			private function serverFileBrowserSelectFile(e:MouseEvent):void
			{
				fileUploadCount = targetFileUploadCount = 0;
				
				var tableName:String = _serverFileBrowser.selectedFileInfo.fileName;
				tableName = tableName.substring(0,tableName.lastIndexOf("."));
				
				shpFileNameInput.text = tableName;
				handleShpNameChange();

				PopUpManager.removePopUp(_serverFileBrowser);
				handleChange();
			}
			
			override public function finish():void
			{
				var alertTitle:String = "Missing parameter";
				if (shpFileNameInput.text == '')
					Alert.show("You must upload a DBF file.", alertTitle);
				else if (dbfKeyColumnsCombo.text == '')
					Alert.show("You must specify the name(s) of the key column(s) in the DBF file.", alertTitle);
				else if (tableSelector.activeTable == '')
					Alert.show("You must specify the name of the destination SQL table.", alertTitle);
				else if (tableTitleInput.text == '')
					Alert.show("You must specify the name of the data table to be visible by users.", alertTitle);
				else
				{
					
					var trimmedKeyCols:String = StringUtil.trimArrayElements(dbfKeyColumnsCombo.text,",");
					var keyCols:Array = trimmedKeyCols.split(","); 
					
					disable();
					addAsyncResponder(
						Admin.service.importSHP(
							shpFileNameInput.text,
							keyCols,
							tableSelector.activeSchema,
							tableSelector.activeTable,
							tableSelector.tableOverwriteCheck.selected,
							tableTitleInput.text,
							keyTypeDialog.selectedKeyType,
							srsProjectionTxtInput.text,
							nullFlagInput.text,
							dbfImportCheckBox.selected,
							!noAppendCheckBox.selected
						),
						function(..._):void { close(); },
						enable
					);
				}
			}
			private function keyColumnsCheckedForUniqueness(event:ResultEvent, token:Object = null):void
			{
				if (event.result)
					dbfKeyColumnsCombo.errorString = '';
				else
					dbfKeyColumnsCombo.errorString = 'Key values are not unique';
				
				dbfKeyColumnsCombo.invalidateDisplayList();
				handleChange();
			}
			
			private function validateProjectionSRS():void
			{
				if (WeaveAPI.ProjectionManager.projectionExists(srsProjectionTxtInput.text))
				{
					srsProjectionTxtInput.errorString = '';
					sharedObject.setProperty(DEFAULT_PROJECTION, srsProjectionTxtInput.text);
				}
				else
				{
					srsProjectionTxtInput.errorString = 'Projection code is not recognized.';
				}
			}
		]]>
	</mx:Script>
</admin:WizardViewStack>
