<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<admin:WizardViewStack
			xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns:ui="weave.ui.*"
			xmlns:admin="weave.ui.admin.*"
			xmlns="weave.ui.admin.wizards.*" 
			label="{lang('Import CSV data to Weave')}"
			creationComplete="handleCreationComplete()"
			>
	
	<mx:VBox id="csvUploadPage" label="{lang('Import a CSV file to SQL')}" width="100%" height="100%">
		<mx:CheckBox id="noAppendCheckBox" label="{lang('Create new Weave table entry even if a matching one already exists')}"/>
		<ui:Indent group="{tableSelector.indentGroup}" label="{lang('CSV file')}" >
			<!-- csvFileNameInput editable because user may want to type the name of a file already on the server -->
			<ui:TextInputWithPrompt id="csvFileNameInput" prompt="{lang('Select a CSV file.')}" editable="true" width="100%"/>
			<mx:Button label="{lang('Upload File')}" click="browseAndUpload();"/>
			<mx:Button label="{lang('Choose File on Server')}" click="openServerBrowser();" />
			<mx:Label id="fileStatus"/>
		</ui:Indent>
		<mx:VBox visible="{arrayNotEmpty(keyOptions.columnNames)}">
			<admin:SQLTableSelectorDialog id="tableSelector"
										  change="handleChange()"
										  showTableCombo="false"
										  tableOverwriteCheckVisible="{Admin.instance.currentUserIsSuperuser}"/>
		</mx:VBox>
	</mx:VBox>
	
	<mx:VBox id="optionalSettingsPage" label="{lang('Configure data for Weave')}" width="100%" height="100%">
		<ui:Indent label="{lang('Table display name')}">
			<ui:TextInputWithPrompt id="dataTableNameInput"
									prompt="{lang('Enter a table name')}"
									text="{tableSelector.activeTable}"
									change="handleChange()"/>
			<ui:HelpComponent>
				This is the name that will be visible in Weave.
			</ui:HelpComponent>
		</ui:Indent>
		<ui:Indent label="{lang('Null flag values')}">
			<mx:TextInput id="nullFlagInput" editable="true"/>
			<ui:HelpComponent>
				If your data has values like "-1" representing missing data,
				you can enter the values here and Weave will treat them as missing data.
				Separate multiple flag values by commas.
			</ui:HelpComponent>
		</ui:Indent>
		<mx:HBox>
			<mx:CheckBox id="generateKeyColumnCheckBox" selected="true" change="handleChange()" label="{lang('Generate a new primary key column')}"/>
			<ui:HelpComponent>
				This will generate a new unique key for each row.
				It is the simplest option, but will not allow you to link the data to other data sets.
			</ui:HelpComponent>
		</mx:HBox>
		<admin:ImportTableKeyOptions id="keyOptions"
									 visible="{!generateKeyColumnCheckBox.selected}"
									 includeInLayout="{!generateKeyColumnCheckBox.selected}"
									 change="handleChange()"
									 paddingLeft="{paddingIndent}"
									 keyColumnCheck="{checkKeyColumns}"
									 defaultKeyType="{dataTableNameInput.text}"/>
	</mx:VBox>
	
	<mx:VBox id="dublinCorePage" label="{lang('Specify Dublin Core metadata')}" width="100%" height="100%">
		<mx:TextArea width="100%" borderThickness="0" editable="false" wordWrap="true" text="{lang('Please fill in this form to add basic Dublin Core metadata elements to the newly imported data set. You can add more elements later in the Data Hierarchies tab.')}"/>
		<mx:LinkButton label="{lang('Click for Dublin Core Reference')}" click="navigateToURL(new URLRequest('http://dublincore.org/documents/usageguide/elements.shtml'))" />
		<mx:Form>
			<mx:FormItem label="{lang('Title')}">
				<mx:TextInput id="dcTitleTextInput" text="{dataTableNameInput.text}"
							  change="dataTableNameInput.text = dcTitleTextInput.text; handleChange();"
							  toolTip="{lang('The name given to the resource. Typically, a Title will be a name by which the resource is formally known.')}"/>
			</mx:FormItem>
			<mx:FormItem label="{lang('Subject')}">
				<mx:TextInput id="dcSubjectTextInput" toolTip="{lang('The topic of the content of the resource. Typically, a Subject will be expressed as keywords or key phrases or classification codes that describe the topic of the resource. Recommended best practice is to select a value from a controlled vocabulary or formal classification scheme.')}"/>
			</mx:FormItem>
			<mx:FormItem label="{lang('Description')}">
				<mx:TextArea id="dcDescriptionTextInput"  toolTip="{lang('An account of the content of the resource. Description may include but is not limited to: an abstract, table of contents, reference to a graphical representation of content or a free-text account of the content.')}"/>
			</mx:FormItem>
		</mx:Form>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.api.WeaveAPI;
			import weave.api.reportError;
			import weave.services.Admin;
			import weave.services.WeaveAdminService;
			import weave.services.addAsyncResponder;
			import weave.api.services.beans.EntityMetadata;
			import weave.ui.BusyIndicator;
			import weave.ui.admin.ServerFileViewer;
			import weave.utils.EventUtils;

			private static const paddingIndent:int = 20;
			private var busyIndicator:BusyIndicator = new BusyIndicator();
			
			private var _csvFileReference:FileReference = new FileReference();
			private var _serverFileBrowser:ServerFileViewer = null;
			
			private function handleCreationComplete():void
			{
				csvUploadPage.addChild(busyIndicator);
				_csvFileReference.addEventListener(Event.SELECT, csvFileSelectedHandler);
				_csvFileReference.addEventListener(ProgressEvent.PROGRESS, handleProgress);
				_csvFileReference.addEventListener(Event.COMPLETE, csvFileLoadCompleteHandler);
				_csvFileReference.addEventListener(IOErrorEvent.IO_ERROR, fileErrorHandler);
				generateKeyColumnCheckBox.addEventListener(Event.CHANGE, handleChange);
				EventUtils.addDelayedEventCallback(csvFileNameInput, Event.CHANGE, getColumnNames);
				hideBusy();
			}
			
			private function handleChange(..._):void
			{
				var step1:Boolean = (
					!busyIndicator.visible
					&& csvFileNameInput.text
					&& tableSelector.activeSchema
					&& tableSelector.activeTable
					&& keyOptions.columnNames.length
				);
				var step2:Boolean = (
					dataTableNameInput.text
					&& keyOptions.keyTypeSelector.selectedKeyType
				);
				var step3:Boolean = true;
				
				stepsCompleted = [step1,step2,step3];
			}
			
			private function arrayNotEmpty(array:Array):Boolean
			{
				return array && array.length;
			}
			
			private function showBusy():void
			{
				busyIndicator.visible = true;
				handleChange();
			}
			private function hideBusy(..._):void
			{
				busyIndicator.visible = false;
				handleChange();
			}
			
			private function handleProgress(event:ProgressEvent):void
			{
				WeaveAPI.ProgressIndicator.updateTask(_csvFileReference, event.bytesLoaded / event.bytesTotal);
			}
			
			private function csvFileSelectedHandler(event:Event):void
			{
				_csvFileReference.load();
				WeaveAPI.ProgressIndicator.addTask(_csvFileReference);
				showBusy();
			}
			
			private function csvFileLoadCompleteHandler(event:Event):void
			{
				WeaveAPI.ProgressIndicator.removeTask(_csvFileReference);
				if (_csvFileReference.data == null)
				{
					hideBusy();
					return;
				}
				
				addAsyncResponder(Admin.service.uploadFile(_csvFileReference.name, _csvFileReference.data), hideBusy, hideBusy);
				
				csvFileNameInput.text = _csvFileReference.name;
				getColumnNames();
			}
				
			
			private function fileErrorHandler(event:IOErrorEvent):void
			{
				hideBusy();
				var fileRef:FileReference = event.target as FileReference;
				WeaveAdminService.messageDisplay(
					"File upload failed",
					"File: " + fileRef.name + "\n" + "Size: " + fileRef.size + "\n" + event.text,
					true
				);
			}

			private function browseAndUpload():void
			{
				try
				{
					generateKeyColumnCheckBox.selected = true;
					keyOptions.secondaryKeyColumnRadio.selected = false;
					var fileTypes:Array = [new FileFilter("CSV Files", "*.csv")];
					_csvFileReference.browse(fileTypes);
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			private function openServerBrowser():void
			{
				_serverFileBrowser = ServerFileViewer.createServerFileViewer(this, ServerFileViewer.INPUT_CSV);
				_serverFileBrowser.datagrid.addEventListener(MouseEvent.DOUBLE_CLICK, serverFileBrowserSelectFile);
				_serverFileBrowser.selectButton.addEventListener(MouseEvent.CLICK, serverFileBrowserSelectFile);
			}
			private function serverFileBrowserSelectFile(e:MouseEvent):void
			{
				csvFileNameInput.text = _serverFileBrowser.datagrid.selectedItem.name;
				PopUpManager.removePopUp(_serverFileBrowser);
				getColumnNames();
			}
			
			private function getColumnNames():void
			{
				var fileName:String = csvFileNameInput.text;
				csvFileNameInput.errorString = '';
				keyOptions.columnNames = [];
				
				if (fileName)
				{
					var query:AsyncToken;
					addAsyncResponder(
						query = Admin.service.getCSVColumnNames(fileName),
						function(e:ResultEvent, fileName:String):void
						{
							if (fileName != csvFileNameInput.text)
								return;
							keyOptions.columnNames = e.result as Array;
							handleChange();
						},
						function(e:FaultEvent, fileName:String):void
						{
							if (fileName != csvFileNameInput.text)
								return;
							csvFileNameInput.errorString = e.fault.faultString;
							selectedIndex = 0;
							handleChange();
						},
						fileName
					);
					Admin.service.hideFaultMessage(query);
				}
				
				tableSelector.activeTable = fileName.substring(0, fileName.lastIndexOf("."));
				
				handleChange();
			}
			
			
			private function checkKeyColumns(onSuccess:Function = null):void
			{
				keyOptions.keyColumnOk = false;
				keyOptions.keyError = '';
				
				if (generateKeyColumnCheckBox.selected)
				{
					if (onSuccess != null)
						onSuccess();
					return;
				}
				
				disable();
				addAsyncResponder(
					Admin.service.checkKeyColumnsForCSVImport(
						csvFileNameInput.text,
						keyOptions.selectedKeyColumns
					),
					function(event:ResultEvent, token:Object = null):void
					{
						enable();
						keyOptions.keyColumnOk = true;
						if (onSuccess != null)
							onSuccess();
					},
					function(event:FaultEvent, token:Object = null):void
					{
						enable();
						keyOptions.keyError = lang("Values in selected columns do not uniquely identify rows in the table");
						selectedIndex = 1; // show key selection step
					}
				);
			}
			
			/**
			 * Adds the new CSV file to the server configuration, then adds the Dublin Core metadata (if any).
			 */
			override public function finish():void
			{
				checkKeyColumns(importCSV);
			}
			
			private function importCSV():void
			{
				disable();
				addAsyncResponder(
					Admin.service.importCSV(
						csvFileNameInput.text,
						generateKeyColumnCheckBox.selected ? '' : keyOptions.mainKeyColumn,
						keyOptions.secondaryKeyColumn,
						tableSelector.activeSchema,
						tableSelector.activeTable,
						tableSelector.tableOverwriteCheck.selected,
						dataTableNameInput.text,
						generateKeyColumnCheckBox.selected ? dataTableNameInput.text : keyOptions.keyTypeSelector.selectedKeyType,
						nullFlagInput.text,
						keyOptions.filteredKeyColumns,
						!noAppendCheckBox.selected
					),
					function handleImportCSV(event:ResultEvent, token:Object = null):void
					{
						var tableId:int = int(event.result);
						
						const SUBJECT:String = 'subject';
						const DESCRIPTION:String = 'description';
						var em:EntityMetadata = new EntityMetadata();
						em.publicMetadata[SUBJECT] = dcSubjectTextInput.text;
						em.publicMetadata[DESCRIPTION] = dcDescriptionTextInput.text;
						if (em.publicMetadata[SUBJECT] || em.publicMetadata[DESCRIPTION])
						{
							addAsyncResponder(
								Admin.service.updateEntity(tableId, em),
								function(..._):void { close(); },
								enable
							);
						}
						else
						{
							close();
						}
					},
					enable
				);
			}
		]]>
	</mx:Script>
</admin:WizardViewStack>
