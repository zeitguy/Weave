<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:TabNavigator xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:ui="weave.ui.*"
				xmlns="weave.ui.admin.managers.*" 
				width="100%" height="100%"
				paddingBottom="16" paddingLeft="8" paddingRight="8" paddingTop="8"
				label="{lang('Connections')}{dataChanged ? '*' : ''}"
				creationComplete="handleCreationComplete()" xmlns:admin="weave.ui.admin.*"
				>
	<mx:HDividedBox id="simpleSetting" label="{lang('Database connections')}{dataChanged ? '*' : ''}" width="100%" height="100%">
		<mx:VBox height="100%">
			<ui:TreeWithSearch id="treeWithSearch" prompt="{lang('Search connections')}"/>
			<mx:HBox width="100%">
				<mx:Spacer width="100%"/>
				<mx:Button label="{lang('Remove')}" click="removeConnection()" enabled="{treeWithSearch.tree.selectedItem != null}"/>
				<mx:Button label="{lang('Refresh')}" click="refresh()"/>
			</mx:HBox>
		</mx:VBox>
		
		<mx:VBox width="100%" height="100%">
			<mx:CheckBox change="{dataChanged=true}" label="{lang('Grant Superuser Permissions')}" id="superuserCheckbox"/>
			<ui:Indent label="{lang('Connection name')}">
				<mx:TextInput id="connectionNameInput" change="{dataChanged=true}" width="130"/>
				<mx:CheckBox label="{lang('Overwrite')}" id="configOverwrite"/>
			</ui:Indent>
			<ui:Indent label="{lang('Password')}">
				<ui:TextInputWithPrompt id="connectionPasswordInput" displayAsPassword="{!showPassCheck.selected}" change="{dataChanged=true}" width="130"/>
				<mx:CheckBox id="showPassCheck" label="{lang('Show')}" selected="false"/>
			</ui:Indent>
			<ui:Indent label="{lang('User Folder Name')}">
				<mx:TextInput id="folderNameInput" width="130"/>
				<ui:HelpComponent>
					Specify the folder in docroot to store user-created configurations
				</ui:HelpComponent>
			</ui:Indent>
			
			<mx:HBox>
				<mx:Label id="fieldToggle" text="{lang('SQL Connection Info')}"/>
				<ui:HelpComponent>
					The basic view provides individual fields which are used to generate a SQL Connect String.
					The resulting Connect String can be modified in the advanced view.
					The individual values from the basic view are not saved.
				</ui:HelpComponent>
			</mx:HBox>
			<mx:Box paddingLeft="32" width="100%">
				<mx:TabNavigator width="100%" paddingLeft="8" paddingRight="8" paddingTop="8" paddingBottom="8" id="connectionInfoTabs">
					<mx:VBox width="100%" label="{lang('Basic')}" id="basicInterface">
						<admin:ConnectStringGenerator id="connectStringGenerator"/>
					</mx:VBox>
					
					<mx:VBox width="100%" height="{basicInterface.height}" label="{lang('Advanced')}" id="advancedInterface">
						<mx:Label text="{lang('Connect String')}"/>
						<mx:VBox paddingLeft="32" width="100%">
							<mx:TextInput id="connectStringInput" change="{dataChanged=true}" width="100%" text="{connectStringGenerator.connectString}" displayAsPassword="{!showConnectStringCheck.selected}"/>
							<mx:CheckBox id="showConnectStringCheck" label="{lang('Show')}" selected="false"/>
						</mx:VBox>
					</mx:VBox>
				</mx:TabNavigator>
			</mx:Box>

			<mx:Spacer height="8"/>
			
			<mx:HBox>
				<mx:Button label="{lang('Save this database connection')}" click="saveConnectionInfo()" id="saveButton"/>
				<mx:Button label="{lang('Clear fields')}" click="clearConnectionFields(true)" />
			</mx:HBox>
		</mx:VBox>
	</mx:HDividedBox>
	
	<mx:Canvas id="migrateTab" label="{lang('Configuration storage location')}" width="100%" height="100%">
		<mx:VBox height="100%" minWidth="500">
			<mx:Label text="{lang('Configuration info for Weave must be stored in a SQL database.')}"/>
			<mx:Label id="lblAre" text='{lang("You are currently using the \"{0}\" connection to store configuration data.", Admin.instance.databaseConfigInfo.connection)}'/>
			<mx:Spacer/>
			<!--<mx:Label text="You may optionally migrate the configuration data to a new database with the controls below."/>-->
			<ui:Paragraph id="lblMay" text="{lang('You may switch to a different location, but the existing configuration data will not be copied over.')}"/>
			<mx:Label id="lblPlease" text="{lang('Please specify where the configuration data should be stored.')}"/>
			<ui:Indent label="{lang('Connection to use')}">
				<ui:CustomComboBox id="migrateConnectionCombo" dataProvider="{Admin.instance.connectionNames}" width="200" prompt="{lang('Select a connection...')}"/>
			</ui:Indent>
			<ui:IndentTextInput label="{lang('Password')}" id="migratePasswordInput" displayAsPassword="true"/>
			<ui:IndentTextInput label="{lang('Schema to use')}" id="migrateSchemaInput" text="{Admin.instance.databaseConfigInfo.schema}"/>
			<ui:Paragraph trim="false"
						  text="{lang('The following tables will be created in the schema specified above:\n    weave_hierarchy, weave_meta_private, weave_meta_public\nIf they already exist, no changes will be made.')}"/>
			<mx:Button id="migrateButton" label="{lang('Store Weave configuration at this location')}" click="saveDatabaseConfigInfo()" />
		</mx:VBox>
	</mx:Canvas>
	
	<mx:Script>
		<![CDATA[
			import weave.services.beans.ConnectionInfo;
			import mx.rpc.AsyncToken;
			import mx.binding.utils.BindingUtils;
			import mx.rpc.events.ResultEvent;
			
			import weave.api.WeaveAPI;
			import weave.api.getCallbackCollection;
			import weave.api.linkableObjectIsBusy;
			import weave.services.Admin;
			import weave.services.addAsyncResponder;
			import weave.services.beans.ConnectionInfo;
			import weave.services.beans.DatabaseConfigInfo;
			import weave.utils.PopUpUtils;
			
			[Bindable]
			private var serverConfigEntryWasModified:Boolean = false;
			
			[Bindable]
			private var dataChanged:Boolean = false;

			private function handleCreationComplete():void
			{
				connectionNameInput.setFocus();
				clearConnectionFields(true);
				BindingUtils.bindSetter(handleConnectionNames, Admin.instance, "connectionNames");
				treeWithSearch.tree.addEventListener(Event.CHANGE, handleTreeSelection);
				BindingUtils.bindSetter(handleDBConfig, Admin.instance, "databaseConfigInfo");
				getCallbackCollection(connectStringGenerator).addImmediateCallback(this, handleConnectStringGenerator);
			}
			
			private function handleConnectStringGenerator():void
			{
				saveButton.enabled = !linkableObjectIsBusy(connectStringGenerator);
			}
			
			private function handleDBConfig(dbInfo:DatabaseConfigInfo):void
			{
				var configured:Boolean = dbInfo && dbInfo.connection;
				lblAre.visible = lblAre.includeInLayout = configured;
				lblMay.visible = lblMay.includeInLayout = configured;
				lblPlease.visible = lblPlease.includeInLayout = !configured;
				migrateConnectionCombo.selectedItem = Admin.instance.databaseConfigInfo.connection;
			}
			
			public function handleConnectionNames(names:Array):void
			{
				treeWithSearch.generateFlatTreeFromLabels(names);
				if(!names)
					return;
				if (names.length == 0)
				{
					superuserCheckbox.selected = true;
					superuserCheckbox.enabled = false;
				}
				else
				{
					superuserCheckbox.enabled = true;
					if (!Admin.instance.databaseConfigExists)
						this.selectedChild = migrateTab;
				}
				migrateTab.enabled = names.length > 0;
				handleDBConfig(Admin.instance.databaseConfigInfo);
			}
			
			private function handleTreeSelection(event:Event):void
			{
				if (dataChanged)
				{
					function cancel():void
					{
						treeWithSearch.tree.selectedItem = null;
					}
					// ask user to confirm
					PopUpUtils.confirm(
						this,
						lang('Discard changes'),
						lang('Discard unsaved changes?'),
						loadDatabaseInfo, cancel,
						lang('Discard'), lang('Cancel')
					);
				}
				else
					loadDatabaseInfo();
			}
			
			private function loadDatabaseInfo():void
			{
				if (treeWithSearch.tree.selectedItem == null)
					return;
				
				this.selectedChild = simpleSetting;
				
				var name:String = treeWithSearch.tree.selectedItem.label;
				addAsyncResponder(Admin.service.getConnectionInfo(name), handleResult, null, name);

				function handleResult(event:ResultEvent, name:String):void
				{
					if (treeWithSearch.tree.selectedItem.label != name)
						return;
					clearConnectionFields(false);
					var info:ConnectionInfo = ConnectionInfo(event.result) || new ConnectionInfo();
					connectionNameInput.text = info.name;
					connectionPasswordInput.text = info.pass;
					superuserCheckbox.selected = info.is_superuser;
					folderNameInput.text = info.folderName;
					connectStringInput.text = info.connectString;
					connectionInfoTabs.selectedChild = advancedInterface;
				}
				
				dataChanged = false;
			}
			
			private function get hostUrl():String
			{
				var result:Array = WeaveAPI.topLevelApplication.url.split("http://");
				result = (result.pop() as String).split("/");
				return result[0] as String;
			}
			
			private const hostIP:String = hostUrl.split(':')[0];
			
			protected function clearConnectionFields(resetConnectString:Boolean):void
			{
				if (resetConnectString)
					treeWithSearch.tree.selectedItem = null;
				connectionNameInput.text = "";
				connectionPasswordInput.text = "";
				folderNameInput.text = "";
				configOverwrite.selected = false;
				superuserCheckbox.selected = (Admin.instance.connectionNames.length == 0);
				connectStringGenerator.resetFields(resetConnectString);
				connectStringInput.text = connectStringGenerator.connectString;
				connectionInfoTabs.selectedChild = basicInterface;
				dataChanged = false;
			}
			
			private function saveConnectionInfo():void
			{
				var info:ConnectionInfo = new ConnectionInfo();
				info.name = connectionNameInput.text;
				info.pass = connectionPasswordInput.text;
				info.is_superuser = superuserCheckbox.selected;
				info.folderName = folderNameInput.text;
				info.connectString = connectStringInput.text
				
				Admin.service.saveConnectionInfo(info, configOverwrite.selected);
				dataChanged = false;
			}
			
			private function saveDatabaseConfigInfo():void
			{
				Admin.service.setDatabaseConfigInfo(
					   migrateConnectionCombo.text,
					   migratePasswordInput.text,
					   migrateSchemaInput.text
					);
			}
			
			private function removeConnection():void
			{
				var connectionLabel:String;
				
				if (treeWithSearch.tree.selectedItem == null)
					return;
				
				connectionLabel = treeWithSearch.tree.selectedItem.label;
				
				PopUpUtils.confirm(
					this,
					lang("Confirm delete"),
					lang('Delete connection "{0}"?  Any existing attribute columns configured to use this connection will stop working.', connectionLabel),
					del, null,
					lang('Delete'), lang('Cancel')
				);
				function del():void
				{
					Admin.service.removeConnectionInfo(treeWithSearch.tree.selectedItem.label);
				}
			}
			
			private function refresh():void
			{
				Admin.service.getConnectionNames();
				Admin.service.getDatabaseConfigInfo();
			}
		]]>
	</mx:Script>
</mx:TabNavigator>
