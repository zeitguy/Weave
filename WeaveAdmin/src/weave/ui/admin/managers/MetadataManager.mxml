<?xml version="1.0" encoding="utf-8"?>
<mx:HDividedBox xmlns:mx="http://www.adobe.com/2006/mxml"
                xmlns:ui="weave.ui.*"
                xmlns:aci="weave.services.beans.*"
                xmlns="weave.ui.admin.managers.*"
                label="{lang('Data Hierarchies')}{metadataEditor.isChanged?'*':''}">
    <mx:VBox height="100%" width="100%" enabled="{!metadataEditor.isChanged}">
		<ui:Indent label="{lang('Data Tables')}" labelFontWeight="bold">
			<ui:TextInputWithPrompt id="tableSearch" prompt="{lang('Search tables')}" width="100%"/>
			<ui:TextInputWithPrompt id="columnSearch" prompt="{lang('Search columns')}" width="100%"/>
			<ui:HelpComponent>
				You can search either by title or id number.
			</ui:HelpComponent>
		</ui:Indent>
        <ui:WeaveTree id="tableTree" width="100%" height="100%"
					   rootNode="{new EntityNode(Admin.entityCache, EntityType.TABLE, filterTableTreeNodes)}"
					   dragEnabled="true" dragMoveEnabled="{editTablesButton.selected}" dropEnabled="{editTablesButton.selected}"/>
        <mx:HBox width="100%">
			<mx:Spacer width="100%"/>
			<mx:Button toggle="true" label="Edit tables" id="editTablesButton" visible="false" includeInLayout="false"/>
            <mx:Button label="{lang('Delete')}" click="deleteTable()" enabled="{tableTree.selectedItem}"/>
			<mx:Button label="{lang('Refresh')}" click="Admin.entityCache.invalidateAll();"/>
        </mx:HBox>
    </mx:VBox>
    <mx:VBox id="hierarchyDiv" minWidth="{plusButton.width}" height="100%" width="100%"
			 resize="minusButton.includeInLayout = minusButton.visible = !(plusButton.includeInLayout = plusButton.visible = (hierarchyDiv.width == plusButton.height));"
			 enabled="{!metadataEditor.isChanged &amp;&amp; !editTablesButton.selected}">
        <mx:HBox width="100%" horizontalGap="0">
			<mx:HBox width="100%" minWidth="0" visible="{minusButton.visible}" includeInLayout="{minusButton.visible}" horizontalScrollPolicy="off">
				<mx:Label text="{lang('Custom Hierarchies')}" fontWeight="bold"/>
				<mx:Spacer width="100%"/>
			</mx:HBox>
			<mx:Button id="minusButton" width="{minusButton.height}"
					   toolTip="{lang('Hide Custom Hierarchies')}"
					   click="hierarchyDiv.width = plusButton.height;"
					   icon="@Embed(source='/weave/resources/images/minus.png')"/>
			<mx:Button id="plusButton" width="{plusButton.height}" visible="false"
					   toolTip="{lang('Show Custom Hierarchies')}"
					   click="hierarchyDiv.width = hierarchyDiv.parent.width / 3"
					   icon="@Embed(source='/weave/resources/images/plus.png')"/>
		</mx:HBox>
		<mx:VBox height="100%" width="100%" visible="{minusButton.visible}" includeInLayout="{minusButton.visible}">
	        <ui:WeaveTree id="hierarchyTree" width="100%" height="100%"
						   rootNode="{new EntityNode(Admin.entityCache, EntityType.HIERARCHY)}"
						   dragEnabled="{!editTablesButton.selected}" dragMoveEnabled="true" dropEnabled="true"/>
	        <mx:HBox width="100%">
		        <ui:TextInputWithPrompt id="categoryNameInput" prompt="{lang('New {0} name', categoryOrHierarchyLabel(hierarchyTree.selectedItems))}" width="100%" enter="addCategory()"/>
	            <mx:Button label="{lang('Add {0}', categoryOrHierarchyLabel(hierarchyTree.selectedItems))}" click="addCategory()" enabled="{Boolean(categoryNameInput.text)}"/>
	            <mx:Button label="{lang('Delete')}" click="deleteHierarchy()" enabled="{hierarchyTree.selectedItem}"/>
	        </mx:HBox>
		</mx:VBox>
    </mx:VBox>
	<ui:MetadataEditor id="metadataEditor" height="100%" width="100%" targetItems="{selectedItems}"/>
<mx:Script>
<![CDATA[
	import mx.events.ListEvent;
	import mx.rpc.events.ResultEvent;
	
	import weave.api.data.ColumnMetadata;
	import weave.api.data.EntityType;
	import weave.api.getCallbackCollection;
	import weave.api.registerLinkableChild;
	import weave.api.reportError;
	import weave.api.services.beans.Entity;
	import weave.api.services.beans.EntityHierarchyInfo;
	import weave.api.services.beans.EntitySearchCriteria;
	import weave.compiler.StandardLib;
	import weave.core.UIUtils;
	import weave.data.hierarchy.EntityNode;
	import weave.services.Admin;
	import weave.services.addAsyncResponder;
	import weave.ui.WeaveTree;
	import weave.utils.EventUtils;
	import weave.utils.PopUpUtils;
	import weave.utils.VectorUtils;
	
    [Bindable] public var selectedItems:Array = [];
	
	private function categoryOrHierarchyLabel(hierarchyTreeSelectedItems:Array):String
	{
		return hierarchyTreeSelectedItems.length == 1 ? 'category' : 'hierarchy';
	}

	override protected function childrenCreated():void
	{
		super.childrenCreated();
		
		registerLinkableChild(tableTree, Admin.entityCache);
		registerLinkableChild(hierarchyTree, Admin.entityCache);
		
		tableTree.setupContextMenu();
		hierarchyTree.setupContextMenu();
		
        tableTree.addEventListener(ListEvent.CHANGE, handleTreeChange);
        hierarchyTree.addEventListener(ListEvent.CHANGE, handleTreeChange);
		
		getCallbackCollection(Admin.entityCache).addImmediateCallback(this, function():void { filterByTableIdLookup = null; });
		
		EventUtils.addDelayedEventCallback(tableSearch, Event.CHANGE, handleTableSearch, 100);
		EventUtils.addDelayedEventCallback(columnSearch, Event.CHANGE, handleColumnSearch, 500);
    }
	
	private function handleTreeChange(event:ListEvent):void
	{
		var tree:WeaveTree = event.currentTarget as WeaveTree;
		var id:int = Admin.instance.getFocusEntityId();
		if (id >= 0)
		{
			for each (var parentId:int in Admin.entityCache.getEntity(id).parentIds)
			{
				Admin.instance.setFocusEntityId(parentId);
				tree.expandMatchingItems(isFocusedEntityNode);
			}
			Admin.instance.setFocusEntityId(id);
			var node:EntityNode = tree.scrollToAndSelectMatchingItem(isFocusedEntityNode) as EntityNode;
			if (node)
			{
				tree.expandItem(node, true);
				Admin.instance.clearFocusEntityId();
			}
		}
		
		selectionsChanged(event);
	}
	
	private function isFocusedEntityNode(node:EntityNode):Boolean
	{
		return node && node.id == Admin.instance.getFocusEntityId();
	}

	private function isUnsignedInt(str:String):Boolean
	{
		var number:Number = StandardLib.asNumber(str);
		return number == uint(number) && str == number.toString();
	}
	
	/**
	 * Surrounds a string with '*' and replaces ' ' with '*'
	 */
	private function addWildcards(str:String):String
	{
		return StandardLib.replace('*' + str + '*', ' ', '*');
	}

	private function strToRegExp(strToSrch:String, flags:String = "i"):RegExp
	{
		var resultStr:String;
		//excape metacharacters other than "*" and "?"
		resultStr = strToSrch.replace(/[\^\$\\\.\+\(\)\[\]\{\}\|]/g, "\\$&");
		//replace strToSrch "?" with reg exp equivalent "."
		resultStr = resultStr.replace(/[\?]/g, ".");
		//replace strToSrch "*" with reg exp equivalent ".*?"
		resultStr = resultStr.replace(/[\*]/g, ".*?");
		return new RegExp("^" + resultStr + "$", flags);
	}
	
	/**
	 * Refreshes tableTree and scrolls to selectedItem.
	 */
	private function refreshTableTree():void
	{
		tableTree.refresh();
		if (tableTree.selectedItem && !tableTree.itemToItemRenderer(tableTree.selectedItem))
			tableTree.scrollToSelectedItem();
	}

	private function handleTableSearch():void
	{
		var searchStr:String = addWildcards(tableSearch.text.toLowerCase());
		filterTableRegExp = strToRegExp(searchStr);
		filterByTableId = isUnsignedInt(tableSearch.text) ? uint(tableSearch.text) : -1;
		Admin.instance.setFocusEntityId(filterByTableId);
		refreshTableTree();
	}
	
	private function handleColumnSearch():void
	{
		var searchStr:String = addWildcards(columnSearch.text.toLowerCase());
		filterByColumnIds = null;
		filterByTableIdLookup = null;
		filterByColumnIdLookup = null;
		
		if (!columnSearch.text)
		{
			refreshTableTree();
			return;
		}
		
		if (isUnsignedInt(columnSearch.text))
		{
			var id:int = uint(columnSearch.text);
			Admin.instance.setFocusEntityId(id);
			Admin.entityCache.getEntity(id);
			filterByColumnIds = [id];
			refreshTableTree();
			return;
		}
		
		var query:EntitySearchCriteria = new EntitySearchCriteria();
		query.publicMetadata[ColumnMetadata.ENTITY_TYPE] = EntityType.COLUMN;
		query.publicMetadata[ColumnMetadata.TITLE] = searchStr;
		query.publicWildcardFields = [ColumnMetadata.TITLE];
		addAsyncResponder(
			Admin.service.findEntityIds(query),
			function(event:ResultEvent, search:String):void
			{
				if (search != columnSearch.text)
					return;
				var ids:Array = event.result as Array;
				filterByColumnIds = ids;
				if (ids.length == 1)
					Admin.instance.setFocusEntityId(ids[0]);
				for each (var id:int in ids)
					Admin.entityCache.getEntity(id);
					
				refreshTableTree();
			},
			null,
			columnSearch.text
		);
	}
	
	private var filterByTableId:int = -1; // table id
	private var filterByColumnIds:Array = null; // list of column ids
	private var filterByColumnIdLookup:Object = null; // column id -> true
	private var filterByTableIdLookup:Object = null; // table id -> true
	private var filterTableRegExp:RegExp = new RegExp(".*");
	
	private function filterTableTreeNodes(node:EntityNode):Boolean
	{
		var info:EntityHierarchyInfo = Admin.entityCache.getBranchInfo(node.id);
		if (info && info.entityType == EntityType.TABLE) // this is a table node
		{
			// if we're only supposed to show one table, that's the only filtering criteria
			if (filterByTableId >= 0)
				return node.id == filterByTableId;
			
			// if columns are being filtered, only show the tables that contain those columns
			if (filterByColumnIds)
			{
				if (!filterByTableIdLookup)
				{
					// Use a separate variable for building the lookup because getEntity()
					// may trigger callbacks and set filterByTableIdLookup to null.
					var newLookup:Object = {};
					for each (var childId:* in filterByColumnIds)
					{
						// avoid requesting entities that do not exist on the server
						if (Admin.entityCache.entityIsCached(childId))
							VectorUtils.fillKeys(newLookup, Admin.entityCache.getEntity(childId).parentIds);
					}
					filterByTableIdLookup = newLookup;
				}
				// stop if we don't want this table
				if (!filterByTableIdLookup[node.id])
					return false;
			}
			
			// if search text was entered, filter by title
			if (tableSearch.text)
				return info.title && filterTableRegExp.test(info.title.toLowerCase());
		}
		else // this is a column node
		{
			if (filterByColumnIds)
			{
				if (!filterByColumnIdLookup)
					VectorUtils.fillKeys(filterByColumnIdLookup = {}, filterByColumnIds);
				if (!filterByColumnIdLookup[node.id])
					return false;
			}
		}
		// return true if this node was not filtered out
		return true;
	}
	
    public function deleteTable():void
    {
		var foundTable:Boolean = false;
		var foundColumn:Boolean = false;
		var foundOther:Boolean = false;
		for each (var item:Object in tableTree.selectedItems)
		{
			var entityType:String = (item as EntityNode).getEntity().getEntityType();
			if (entityType == EntityType.TABLE)
				foundTable = true;
			else if (entityType == EntityType.COLUMN)
				foundColumn = true;
			else
				foundOther = true;
		}
		var typeStr:String = lang("tables and columns");
		if (foundOther)
			typeStr = lang("items");
		else if (foundTable != foundColumn)
			typeStr = foundTable ? lang("tables") : lang("columns");
			
        PopUpUtils.confirm(
			this,
			lang("Delete {0}", typeStr),
			lang("Delete selected {0}?\nExisting visualizations using this data will stop working.", typeStr),
			deleteTableFunction,
			null,
			lang("Delete"),
			lang("Cancel")
		);
        function deleteTableFunction():void
        {
			for each (var item:EntityNode in tableTree.selectedItems)
				Admin.entityCache.delete_entity(item.id);
			
			tableTree.selectedItem = null;
		}
    }
    public function addCategory():void
    {
		var name:String = categoryNameInput.text
        if (!name)
        {
            UIUtils.componentPulse(categoryNameInput);
            return;
        }
		
		var node:EntityNode;
		if (hierarchyTree.selectedItems.length == 1)
			node = hierarchyTree.selectedItem as EntityNode;
		else
			node = hierarchyTree.rootNode as EntityNode;
        
		var index:int = -1;
		// if user selected a column, use its parent node and insert at the column's position
		if (node.getEntity().getEntityType() == EntityType.COLUMN)
		{
			var parent:EntityNode = hierarchyTree.getParentItem(node);
			index = parent.getEntity().childIds.indexOf(node.id);
			node = parent;
		}
		
		Admin.entityCache.add_category(name, node.id, index);
   	    categoryNameInput.text = "";
		hierarchyTree.expandItem(node, true); // expand so new child can be selected
    }
    public function selectionsChanged(event:ListEvent):void
    {
		var tree:WeaveTree = event.currentTarget as WeaveTree;
		var otherTree:WeaveTree = tree === tableTree ? hierarchyTree : tableTree;
		
		// if both trees have something selected, prefer the tree that just selected something.
		if (tree.selectedItem && otherTree.selectedItem)
			otherTree.selectedItems = [];
		
		if (tree.selectedItem)
			this.selectedItems = tree.selectedItems.concat().reverse(); // use reverse order because shift+click produces reverse order
		else if (!otherTree.selectedItem)
			this.selectedItems = []; // neither tree has selection
    }
    public function deleteHierarchy(confirmed:Boolean = false):void
    {
		var item:EntityNode;
		if (!confirmed)
		{
			for each (item in hierarchyTree.selectedItems)
			{
				if (item.getEntity().getEntityType() == EntityType.HIERARCHY)
				{
		            PopUpUtils.confirm(
						this,
						lang("Remove hierarchy items"),
						lang('You have selected some root hierarchies.  Remove all selected items?'),
						function():void { deleteHierarchy(true); },
						null,
						lang("Remove"),
						lang("Cancel")
					);
					return;
				}
			}
		}
		
		for each (item in hierarchyTree.selectedItems)
		{
			// only delete hierarchies and categories (do not delete columns)
			var entity:Entity = item.getEntity();
			var type:String = entity.getEntityType();
			if (type == EntityType.HIERARCHY || type == EntityType.CATEGORY)
			{
				// delete hierarchy or category
				Admin.entityCache.delete_entity(item.id);
			}
			else
			{
				// remove column from parent
				var parent:EntityNode = hierarchyTree.getParentItem(item);
				if (parent)
					Admin.entityCache.remove_child(parent.id, item.id);
				else
					reportError("Entity " + item.id + " has no parent node"); // should never happen
			}
		}
		
		hierarchyTree.selectedItem = null;
		selectedItems = [];
	}
]]>
</mx:Script>
</mx:HDividedBox>
