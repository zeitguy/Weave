<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<!--
	This is a generic panel for a wizard interface, containing back/next/finish/cancel buttons.
	@author adufilie
-->
<mx:Panel 
		xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns="weave.ui.admin.*"
		layout="absolute"
		title="{viewStack.label}"
		borderAlpha="1"
		borderColor="#939178"
		borderThicknessLeft="{padding}" borderThicknessRight="{padding}"
		backgroundColor="#939178"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		roundedBottomCorners="true">

	<!-- This box is where the viewStack and messageLog will be placed -->
	<mx:VDividedBox id="viewStackContainer"
					width="100%" height="100%"
					verticalScrollPolicy="off"
					horizontalScrollPolicy="off"/>
	
	<mx:ControlBar paddingTop="{padding}" paddingBottom="{padding}" enabled="{viewStack.controlBarEnabled}" verticalAlign="middle">
		<mx:Label text="Step {viewStack.selectedIndex + 1} of {viewStackNumChildren}{viewStack.selectedChild.label ? ': ' + viewStack.selectedChild.label : ''}"/>
		<mx:Spacer width="100%"/>
		<mx:Button id="backButton" label="Back"
				   visible="{viewStackNumChildren > 1}"
				   enabled="{viewStack.selectedIndex &gt; 0}"
				   click="viewStack.back()"/>
		<mx:Button id="nextButton" label="Next"
				   visible="{viewStackNumChildren > 1}"
				   enabled="{nextButtonEnabled(viewStack.stepsCompleted, viewStack.selectedIndex, viewStackNumChildren)}"
				   click="viewStack.next()"/>
		<mx:Button id="finishButton" label="Finish" enabled="{finishButtonEnabled(viewStack.stepsCompleted)}" click="handleFinishClick()" emphasized="true"/>
		<mx:Button id="cancelButton" label="Close" click="viewStack.cancel();"/>
	</mx:ControlBar>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.TextArea;
			import mx.core.Container;
			import mx.core.ScrollPolicy;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import weave.services.WeaveAdminService;
			
			private static const padding:int = 8;
			
			[Bindable] private var viewStack:WizardViewStack = null;
			[Bindable] private var viewStackNumChildren:int = 0; // this is used because numChildren is not bindable
			
			private function nextButtonEnabled(stepsCompleted:Array, selectedIndex:int, numChildren:int):Boolean
			{
				if (selectedIndex == numChildren - 1)
					return false;
				for (var i:int = 0; stepsCompleted && i < stepsCompleted.length && i <= selectedIndex; i++)
					if (!stepsCompleted[i])
						return false;
				return true;
			}
			
			private function finishButtonEnabled(stepsCompleted:Array):Boolean
			{
				for each (var completed:Boolean in stepsCompleted)
					if (!completed)
						return false;
				return true;
			}
			
			/**
			 * This function must be called to initialize the WizardViewStack used by the WizardPanel.
			 * @param viewStack A WizardViewStack that the WizardPanel will control.
			 */
			public function setWizardViewStack(viewStack:WizardViewStack):void
			{
				this.viewStack = viewStack;
				viewStack.setStyle("backgroundColor", 0xFFFFFF);
				viewStackContainer.addChildAt(viewStack, 0);
				viewStack.addEventListener(FlexEvent.CREATION_COMPLETE, function(..._):void { viewStackNumChildren = viewStack.numChildren; });
				
				// The TextArea log needs the logging messages from the AdminConsole.
				// This currently pushes all new logging messages since this panel was instantiated.
				// It should only display logging messages for AsyncTokens which were created 
				// in this instance.
				WeaveAdminService.messageLogCallbacks.addImmediateCallback(this, handleMessage);
			}
			
			private var _isLogAdded:Boolean = false;
			public var messageLog:TextArea = new TextArea();
			private function handleMessage():void
			{
				if (!_isLogAdded)
				{	
					var tempHeight:Number = viewStackContainer.height;
					messageLog.opaqueBackground = 0xFFFFFF;
					messageLog.editable = false;
					messageLog.percentWidth = 100
					messageLog.percentHeight = 100;
					messageLog.horizontalScrollPolicy = ScrollPolicy.OFF;
					messageLog.verticalScrollPolicy = ScrollPolicy.OFF;
					messageLog.setStyle("borderSkin", null);
					
					viewStackContainer.addChild(messageLog);
					viewStackContainer.moveDivider(0, -(viewStackContainer.height / 5));
					_isLogAdded = true;
					
					viewStackContainer.height = tempHeight;
				}

				messageLog.text += "\n\n" + WeaveAdminService.messageLog[WeaveAdminService.messageLog.length - 1];
				messageLog.validateProperties();
				messageLog.verticalScrollPosition = messageLog.maxVerticalScrollPosition;
			}
			private function handleFinishClick():void
			{
				messageLog.text = '';
				viewStack.finish();
			}
			
			/**
			 * This function creates a Wizard Panel using a specified WizardViewStack object.
			 * @param parent The parent of the popup window to be created.
			 * @param wizardPanelClass A Class that extends WizardPanel and contains controls you want to display inside a popup.
			 */
			public static function createWizard(parent:DisplayObject, wizardViewStack:WizardViewStack):Container
			{
				function close(..._):void{ PopUpManager.removePopUp(wiz); }
				
				var wiz:WizardPanel = PopUpManager.createPopUp(parent, WizardPanel, true) as WizardPanel;
				wiz.setWizardViewStack(wizardViewStack);
				wizardViewStack.addEventListener(CloseEvent.CLOSE, close);
				PopUpManager.centerPopUp(wiz);
				wiz.cancelButton.addEventListener(MouseEvent.CLICK, close);
				return wiz;
			}
		]]>
	</mx:Script>
</mx:Panel>
