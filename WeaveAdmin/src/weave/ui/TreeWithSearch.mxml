<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns="weave.ui.*"
		 verticalGap="8"
		 horizontalScrollPolicy="off"
		 height="100%" width="100%"
		 >
	<TextInputWithPrompt id="searchTerm" width="100%" prompt="{prompt}" clear="search()" change="search()"/><!-- toolTip="would show tree as flat list with columns (date, creator, etc) that could be sorted" -->
	<CustomTree id="tree" dataProvider="{treeSource}" showRoot="false" width="100%" height="100%" dragEnabled="true" dragMoveEnabled="true"/>
	
<mx:Script>
	<![CDATA[
		
		
		[Bindable] public var treeSource:Object = null;
		[Bindable] public var prompt:String = "Enter search text";
		
		/**
		 * This will set the treeSource to a flat tree, generated from a list of labels.
		 * @param labels A flat list of labels to use as items in the tree.
		 */
		public function generateFlatTreeFromLabels(labels:Array):void
		{
			var item:Object;
			var items:Array = [];
			var root:Object = null;
			if(!labels)
				labels = [];
			var vsp:int = tree.verticalScrollPosition;
			var isSelected:Object = {};
			for each (item in tree.selectedItems)
				isSelected[item.label] = true;
				
			if (labels.length > 0)
			{
				root = {label: "", object: "", children: []};
				for (var i:int = 0; i < labels.length; i++)
				{
					item = {label: labels[i], object: labels[i], children: null};
					root.children.push(item);
					if (isSelected[labels[i]])
						items.push(item);
				}
			}
			treeSource = root;
			tree.selectedItemsCompareFunction = compareFlatTreeItems;
			search();
			tree.validateNow();
			tree.selectedItems = items;
			tree.verticalScrollPosition = vsp;
		}
		
		private function compareFlatTreeItems(itemInDataProvider:Object, itemInSelectedItems:Object):Boolean
		{
			if (!itemInDataProvider || !itemInSelectedItems)
				return itemInDataProvider == itemInSelectedItems;
			return itemInDataProvider.label == itemInSelectedItems.label;
		}
		
		private function search():void
		{
			tree.refreshDataProvider(getFilteredTree(treeSource) || []);
			if (tree.selectedItem && !tree.itemToItemRenderer(tree.selectedItem))
				tree.scrollToAndSelectMatchingItem(function(item:Object):Boolean { return tree.selectedItem == item; });
		}
		
		private function clear():void
		{
			searchTerm.text = "";
			search();
		}
		private function getFilteredTree(node:Object):Object
		{
			if (!searchTerm.text || node == null)
				return node;

			var result:Object = {label: node.label, object: node.object, children: []};
			
			if (node.children == null || node.children.length == 0)
			{
				if ((node.label as String).toLowerCase().search(searchTerm.text.toLowerCase()) < 0)
					return null;
				node.children = null;
				return node;
			}
			
			for (var i:int = 0; i < node.children.length; i++)
			{
				var subtree:Object = getFilteredTree(node.children[i]);
				if (subtree != null)
					result.children.push(subtree);
			}
			
			if (result.children.length == 0)
			{
				result.children = null;
				if ((result.label as String).toLowerCase().search(searchTerm.text.toLowerCase()) < 0)
					return null;
			}
			
			return result;
		}
	]]>
</mx:Script>
</mx:VBox>
