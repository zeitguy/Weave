<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
Displays catoegories in a tree view and the attributes in a list.
@author skolman
-->
<mx:HDividedBox
	xmlns:ui ="weave.ui.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	implements="weave.api.core.ILinkableObject"
	width="100%" height="100%"
	>

	<mx:VBox id="categoryVBox" width="100%" height="100%"
			 verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<ui:EntityTree id="categoryView" width="100%" height="100%"
					   allowMultipleSelection="false"
					   itemClose="handleCategoryCollapse(event)"
					   doubleClickEnabled="true" doubleClick="handleCategoryDoubleClick()"
					   showDataTips="true" change="handleCategoryChange()"/>
	</mx:VBox>
	<mx:VBox id="attributeVBox" width="100%" height="100%"
			 verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<ui:EntityTree id="attributeView" width="100%" height="100%" showDataTips="true"
					   doubleClickEnabled="true" doubleClick="handleAttributeDoubleClick()"
					   mouseDown="if (attributeView.mouseX &lt; attributeView.width - 16) handleAttributeChange()"
					   change="handleAttributeChange()"/>
	</mx:VBox>

	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.controls.Tree;
			import mx.events.TreeEvent;
			
			import weave.api.core.ILinkableObject;
			import weave.api.data.IEntityTreeNode;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableString;
			import weave.data.hierarchy.DataSourceTreeNode;
			
			private const attributeDataProvider:ArrayCollection = new ArrayCollection();
			
			// used to filter the hierarchy categories
			public const categoryFilter:LinkableString = registerLinkableChild(this, new LinkableString('', isNonNull));
			
			// used to filter the hierarchy attributes
			public const attributeFilter:LinkableString = registerLinkableChild(this, new LinkableString('', isNonNull));
			
			/*************************/
			private function isNonNull(value:String):Boolean { return value != null; }
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				categoryView.dataDescriptor = new EntityTreeDataDescriptor(1);
				categoryView.rootNode = registerLinkableChild(attributeView, newLinkableChild(categoryView, DataSourceTreeNode));
				BindingUtils.bindSetter(handleCategorySelectedItem, categoryView, 'selectedItem');
				
				attributeView.dataDescriptor = new EntityTreeDataDescriptor(2);
				attributeView.dataProvider = attributeDataProvider;
				attributeDataProvider.filterFunction = attributeFilterFunction;
				attributeFilter.addImmediateCallback(this, attributeDataProvider.refresh, true);
			}
			
			private function handleCategorySelectedItem(category:IEntityTreeNode):void
			{
				attributeVBox.visible = attributeVBox.includeInLayout = !!category;
				attributeDataProvider.source = category ? category.getChildren() : null;
			}

			private function attributeFilterFunction(item:Object):Boolean
			{
				var lowerCaseFilter:String = attributeFilter.value.toLowerCase();
				var label:String = attributeView.itemToLabel(item);
				if (label.toLowerCase().search(lowerCaseFilter) < 0)
					return false;
				else
					return true;
			}

			private function handleCategoryChange():void
			{
				
			}
			
			private function handleAttributeChange():void
			{
				
			}
			
			private function handleCategoryCollapse(event:TreeEvent):void
			{
				// if collapsing a node would make the current selection disappear, select the collapsing node
				if (selectionWouldDisappear(categoryView, event.item as IEntityTreeNode, categoryView.selectedItem as IEntityTreeNode))
					categoryView.selectedItem = event.item as IEntityTreeNode;
			}
			
			private function selectionWouldDisappear(tree:Tree, collapsing:IEntityTreeNode, selected:IEntityTreeNode):Boolean
			{
				if (!collapsing || !selected)
					return false;
				
				var children:Array = collapsing.getChildren();
				if (children.indexOf(selected) >= 0)
					return true;
				
				// first test if child item is open before requesting children with the recursive call
				for each (var child:IEntityTreeNode in children)
					if (tree.isItemOpen(child) && selectionWouldDisappear(tree, child, selected))
						return true;
				
				return false;
			}
			
			private function handleCategoryDoubleClick():void
			{
				// Toggle expanded state.
				// Note that this will toggle the folder icon whether or not the node has child branches.
				// Also note that the same behavior occurs when using the left and right arrow keys.
				// We could check node.hasChildBranches() before toggling expanded state, but the user may find marking the folder icons useful.
				var node:IEntityTreeNode = categoryView.selectedItem as IEntityTreeNode;
				if (node)
					categoryView.expandItem(node, !categoryView.isItemOpen(node));
			}
			private function handleAttributeDoubleClick():void
			{
				var node:IEntityTreeNode = attributeView.selectedItem as IEntityTreeNode;
				if (node && node.isBranch())
				{
					// expand parent, scroll to, and select
					categoryView.expandItem(categoryView.selectedItem, true);
					categoryView.scrollToAndSelectMatchingItem(
						function(category:IEntityTreeNode):Boolean {
							return category == node;
						}
					);
				}
			}
		]]>
	</mx:Script>
</mx:HDividedBox>
