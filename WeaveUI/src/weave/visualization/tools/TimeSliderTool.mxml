<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SliderTool
	xmlns="weave.visualization.tools.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ui="weave.ui.*"
	xmlns:settings="weave.ui.settings.*"
	xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*"
	verticalScrollPolicy="off"
	width="400" 
	title="{lang('Time Slider Tool')}"
	height="40">

<mx:Script>
		<![CDATA[
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.ui.IVisTool;
			import weave.data.ColumnReferences.HierarchyColumnReference;
			import weave.data.DataSources.IDataSource_old;
			import weave.data.DataSources.WeaveDataSource;
			import weave.utils.HierarchyUtils;
			
			WeaveAPI.registerImplementation(IVisTool, TimeSliderTool, "Time Slider Tool");
			
			override protected function constructor():void
			{
				super.constructor();
				showLinkControls = true;
			}
			
			//overrides of abstract SliderTool functions
			
			/**
			 * This function finds a list of attribute tags in the same attribute hierarchy
			 * that have the same @dataTable and @name attributes, then returns a list of
			 * their @year values.
			 * @param ref A reference to an attribute tag in an AttributeHierarchy.
			 * @return An Array of @year values that the referenced column is defined for.
			 */
			override protected function getValuesFromColHier(ref:HierarchyColumnReference):Array
			{
				var times:Array = getFilterValuesFromHierarchy(ref, ['name'], 'year');
				if (times.length > 0)
					addToListOfDims(ref);
				return times;
			}
			
			/** 
			 * change - this method is automatically called when the hslider
			 *  is changed.  Here we update all the visualization tools to 
			 *  the new time.  
			 * **/
			override public function handleSliderChange():void
			{
				var filterValue:String = sliderValue;
				if (!filterValue)
					return;
				
				var _unlinkedTools:Array = getUnlinkedTools();
				
				// get descendants of all global objects
				var obj:Object;
				var dd:Dictionary = new Dictionary(true);
				var names:Array = WeaveAPI.globalHashMap.getNames();
				for each (var name:String in names)
				{
					if (_unlinkedTools.indexOf(name) >= 0)
						continue;
					var object:ILinkableObject = WeaveAPI.globalHashMap.getObject(name);
					if (object is LineChartTool && !linkLineCharts.value)
						continue;
					if (!linkGlobalColumns.value && object is IAttributeColumn)
						continue;
					for each (obj in WeaveAPI.SessionManager.getLinkableDescendants(object, HierarchyColumnReference))
						dd[obj] = true;
				}
				var descendants:Array = [];
				for (obj in dd)
					descendants.push(obj);
				
				var len:int = descendants.length;
				for (var i:int = 0; i < len; i++)
				{
					var ref:HierarchyColumnReference = descendants[i] as HierarchyColumnReference;
					var path:XML = XML(ref.hierarchyPath.value).copy(); // make a copy so we don't modify the original
					var search:XML = path..attribute[0] || path;
					if (String(search.@year) && String(search.@year) != filterValue)
					{
						delete search['@'+WeaveDataSource.ENTITY_ID];
						delete search.@title;
						search.@year = filterValue;
						if (search.@csvColumn)
						{
							// this hack adds support for CSVDataSource
							try
							{
								delete search.@csvColumn;
								if (String(search.@name))
									delete search.@title;
								var dataSource:IDataSource_old = ref.getDataSource() as IDataSource_old;
								var list:XMLList = dataSource.attributeHierarchy.value.descendants('attribute');
								path = HierarchyUtils.getFirstNodeContainingAttributes(list, search, true, false) || path;
							}
							catch (e:Error) { }
						}
					}
					ref.hierarchyPath.value = path;
				}
			}
			
			/**
			 * Searches a hierarchy for all values of a filter property that can be used to find related columns.
			 * @param ref A column reference.
			 * @param groupNames Names of properties used for grouping columns (example: ["dataTable", "name"])
			 * @param filterName The name of a property used for filtering columns out of a group (example: "year")
			 */
			protected function getFilterValuesFromHierarchy(ref:HierarchyColumnReference, groupNames:Array, filterName:String):Array
			{
				var filterValues:Array = [];
				
				var path:XML = ref.hierarchyPath.value;
				var dataSource:IDataSource_old = ref.getDataSource() as IDataSource_old;
				if (dataSource == null)
					return filterValues;
				
				var hierarchy:XML = dataSource.attributeHierarchy.value;
				if (!hierarchy)
					return filterValues;
				
				var node:XML = HierarchyUtils.getNodeFromPath(hierarchy, path);
				var otherNodes:XMLList;
				if (node)
				{
					// found matching node in hierarchy, so just search the current category
					otherNodes = XML(node.parent()).child("attribute");
				}
				else
				{
					node = HierarchyUtils.getNodeFromPath(path, path); // get leaf node
					otherNodes = hierarchy.descendants("attribute");
				}
				
				var groupValues:Array = groupNames.map(function(name:String, i:*, a:*):String { return node.attribute(name); });
				var filterValue:String;
				outerLoop: for (var i:int = 0; i < otherNodes.length(); i++)
				{
					var otherNode:XML = otherNodes[i];
					for (var j:int = 0; j < groupNames.length; j++)
						if (String(otherNode.attribute(groupNames[j])) != groupValues[j])
							continue outerLoop;
					filterValue = otherNode.attribute(filterName);
					if (filterValue)
						filterValues.push(filterValue);
				}
		
				return filterValues;		
			}
		]]>
	</mx:Script>
</SliderTool>
